"89a0fffe66ef6f63223e4956c43c34b7077d4634"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((291 . 298)) nil (23810 22085 225233 493000) 0 nil]) ((277 . 278)) nil (23810 22085 225250 176000) 0 nil]) ((267 . 277) (#("f" 0 1 (fontified t face font-lock-doc-face)) . -267) (undo-tree-id0 . -1) (256 . 268)) nil (23810 22085 225294 52000) 0 nil]) ((#("d" 0 1 (fontified t face font-lock-doc-face)) . -256) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("d" 0 1 (fontified t face font-lock-doc-face)) . -257) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 258) nil (23810 22085 225348 964000) 0 nil]) ((251 . 258)) nil (23810 22085 225361 227000) 0 nil]) ((#("h" 0 1 (fontified t face font-lock-doc-face)) . -251) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -252) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) 253) nil (23810 22085 225431 193000) 0 nil]) ((251 . 253)) nil (23810 22085 225443 311000) 0 nil]) ((#("i" 0 1 (fontified t face font-lock-doc-face)) . -251) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -252) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("h" 0 1 (fontified t face font-lock-doc-face)) . -253) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) 254) nil (23810 22085 225539 521000) 0 nil]) ((250 . 254)) nil (23810 22085 225554 913000) 0 nil]) ((#("with " 0 5 (fontified t face font-lock-doc-face)) . -250) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) (undo-tree-id52 . -5) (undo-tree-id53 . -5) (undo-tree-id54 . -5) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -5) (undo-tree-id58 . -5) 255) nil (23810 22085 225613 144000) 0 nil]) ((#("does " 0 5 (fontified t face font-lock-doc-face)) . -255) (undo-tree-id59 . -5) (undo-tree-id60 . -5) (undo-tree-id61 . -5) (undo-tree-id62 . -5) (undo-tree-id63 . -5) (undo-tree-id64 . -5) (undo-tree-id65 . -5) (undo-tree-id66 . -5) 260) nil (23810 22085 225659 466000) 0 nil]) ((#("not " 0 4 (fontified t face font-lock-doc-face)) . -260) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -3) (undo-tree-id71 . -3) 264) nil (23810 22085 225686 717000) 0 nil]) ((244 . 264)) nil (23810 22085 225694 431000) 0 nil]) ((#("lef" 0 3 (fontified t face font-lock-doc-face)) . -244) (undo-tree-id72 . -3) (undo-tree-id73 . -3) 247) nil (23810 22085 225710 182000) 0 nil]) ((246 . 247) (#("f" 0 1 (fontified t face font-lock-doc-face)) . -246) (undo-tree-id74 . -1) (244 . 247)) nil (23810 22085 225723 139000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-doc-face)) . -175) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 176) nil (23810 22085 225745 438000) 0 nil]) ((#("element" 0 7 (fontified t face font-lock-doc-face)) . -176) (undo-tree-id77 . -7) (undo-tree-id78 . -7) 183) nil (23810 22085 225760 405000) 0 nil]) ((173 . 175)) nil (23810 22085 225767 410000) 0 nil]) ((#("r" 0 1 (fontified t face font-lock-doc-face)) . -173) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -174) (undo-tree-id81 . -1) (undo-tree-id82 . -1) 175) nil (23810 22085 225791 192000) 0 nil]) ((167 . 175)) nil (23810 22085 225799 481000) 0 nil]) ((155 . 167)) nil (23810 22085 225804 577000) 0 nil]) ((#("uniqu" 0 5 (fontified t face font-lock-doc-face)) . -155) (undo-tree-id83 . -5) (undo-tree-id84 . 5) (undo-tree-id85 . -5) 160) nil (23810 22085 225821 808000) 0 nil]) ((#("e" 0 1 (fontified t face font-lock-doc-face)) . -160) (undo-tree-id86 . -1) 161) nil (23810 22085 225833 135000) 0 nil]) ((#("U" 0 1 (fontified t face font-lock-doc-face)) . -224) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -225) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -226) (undo-tree-id91 . -1) 227) nil (23810 22085 225868 891000) 0 nil]) ((224 . 227)) nil (23810 22085 225879 26000) 0 nil]) ((219 . 222) (218 . 220) (#("(" 0 1 (fontified nil face font-lock-doc-face)) . -218) (212 . 219)) nil (23810 22085 225888 458000) 0 nil]) ((187 . 196)) nil (23810 22085 225895 641000) 0 nil]) ((176 . 187)) nil (23810 22085 225901 43000) 0 nil]) ((155 . 176)) nil (23810 22085 225906 135000) 0 nil]) ((149 . 155)) nil (23810 22085 225911 334000) 0 nil]) ((#("FIXME! " 0 5 (fontified t face (:inherit hl-todo :foreground "#cc9393")) 5 7 (fontified t face font-lock-doc-face)) . -149) (undo-tree-id92 . -7) 156) nil (23810 22085 225921 774000) 0 nil]) ((#("briefly " 0 8 (fontified t face font-lock-doc-face)) . -156) (undo-tree-id93 . -8) 164) nil (23810 22085 225941 280000) 0 nil]) ((#("describe " 0 9 (fontified t face font-lock-doc-face)) . -164) (undo-tree-id94 . -9) 173) nil (23810 22085 225953 406000) 0 nil]) ((#("function" 0 8 (fontified t face font-lock-doc-face)) . -173) (undo-tree-id95 . -8) 181) nil (23810 22085 225964 250000) 0 nil]) ((227 . 231) (213 . 217) (198 . 202) (183 . 187) (141 . 218) 140) nil (23810 22085 225977 190000) 0 nil]) ((#("
" 0 1 (fontified t face font-lock-comment-face)) . -177) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 178) nil (23810 22085 226003 294000) 0 nil]) ((#("    " 0 4 (fontified t)) . -178) (undo-tree-id98 . -4) 182) nil (23810 22085 226014 456000) 0 nil]) ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -182) (undo-tree-id99 . -1) 183) nil (23810 22085 226025 470000) 0 nil]) ((182 . 183)) nil (23810 22085 226037 428000) 0 nil]) ((#(" " 0 1 (fontified t)) . -182) (undo-tree-id100 . -1) 183) nil (23810 22085 226047 934000) 0 nil]) ((#("C" 0 1 (fontified t)) . -183) (undo-tree-id101 . -1) (#("o" 0 1 (fontified t)) . -184) (undo-tree-id102 . -1) (#("u" 0 1 (fontified t)) . -185) (undo-tree-id103 . -1) (#("n" 0 1 (fontified t)) . -186) (undo-tree-id104 . -1) 187) nil (23810 22085 226073 675000) 0 nil]) ((#("t" 0 1 (fontified t)) . -187) (undo-tree-id105 . -1) 188) nil (23810 22085 226088 384000) 0 nil]) ((182 . 188)) nil (23810 22085 226094 345000) 0 nil]) ((177 . 182) 174) nil (23810 22085 226100 492000) 0 nil]) ((1 . 328) (#("# you can write to stdout for debugging purposes, e.g.
# print(\"this is a debug message\")
from collections import Counter
def solution(A):
    # write your code in Python 3.6
    cnt = Counter(A)
    leftover = 0
    for elem, count in cnt.items():
        if count%2 != 0:
            leftover = elem

    return leftover" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 55 (fontified t face font-lock-comment-face) 55 57 (fontified t face font-lock-comment-delimiter-face) 57 63 (fontified t face font-lock-comment-face) 63 64 (fontified t syntax-table #1=(15) face font-lock-comment-face) 64 87 (fontified t face font-lock-comment-face) 87 88 (fontified t syntax-table #1# face font-lock-comment-face) 88 90 (fontified t face font-lock-comment-face) 90 94 (fontified t face font-lock-keyword-face) 94 107 (fontified t) 107 113 (fontified t face font-lock-keyword-face) 113 122 (fontified t) 122 125 (fontified t face font-lock-keyword-face) 125 126 (fontified t) 126 134 (fontified t face font-lock-function-name-face) 134 135 (fontified t face (rainbow-delimiters-depth-1-face)) 135 136 (fontified t) 136 137 (fontified t face (rainbow-delimiters-depth-1-face)) 137 138 (fontified t composition (3 1 #2=[9 57708])) 138 143 (fontified t) 143 145 (fontified t face font-lock-comment-delimiter-face) 145 175 (fontified t face font-lock-comment-face) 175 179 (fontified t) 179 182 (fontified t face font-lock-variable-name-face) 182 192 (fontified t) 192 193 (fontified t face (rainbow-delimiters-depth-1-face)) 193 194 (fontified t) 194 195 (fontified t face (rainbow-delimiters-depth-1-face)) 195 200 (fontified t) 200 208 (fontified t face font-lock-variable-name-face) 208 211 (fontified t) 211 212 (fontified t face highlight-numbers-number) 212 217 (fontified t) 217 220 (fontified t face font-lock-keyword-face) 220 233 (fontified t) 233 235 (fontified t face font-lock-keyword-face) 235 245 (fontified t) 245 246 (fontified t face (rainbow-delimiters-depth-1-face)) 246 247 (fontified t face (rainbow-delimiters-depth-1-face)) 247 248 (fontified t composition (3 1 #2#)) 248 257 (fontified t) 257 259 (fontified t face font-lock-keyword-face) 259 266 (fontified t) 266 267 (fontified t face highlight-numbers-number) 267 268 (fontified t) 268 270 (fontified t composition (13 2 [9 57614])) 270 271 (fontified t) 271 272 (fontified t face highlight-numbers-number) 272 273 (fontified t composition (3 1 #2#)) 273 286 (fontified t) 286 294 (fontified t face font-lock-variable-name-face) 294 307 (fontified t) 307 313 (fontified t face font-lock-keyword-face) 313 321 (fontified t) 321 322 (fontified t rear-nonsticky t)) . 1) (undo-tree-id106 . -321) (undo-tree-id107 . -303) (undo-tree-id108 . -322) (undo-tree-id109 . -321) 322) nil (23810 22085 226122 637000) 0 nil]) ((nil rear-nonsticky nil 322 . 323) (nil fontified nil 1 . 323) (1 . 323) (t . -1)) nil (23810 22085 226142 468000) 0 nil]) nil nil (23810 22085 226147 532000) 0 nil] #3# 2068 46 nil)