"96393a8b5f0fc74faa8c1fb00aaba8a7db75777c"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((460 . 463)) nil (23810 22225 845132 665000) 0 nil]) ((#("m" 0 1 (fontified t face font-lock-comment-face)) . -460) (undo-tree-id15 . -1) (undo-tree-id16 . -1) 461) nil (23810 22225 845249 422000) 0 nil]) ((459 . 461)) nil (23810 22225 845298 803000) 0 nil]) ((#("s" 0 1 (fontified t face font-lock-comment-face)) . -459) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 460) nil (23810 22225 845328 553000) 0 nil]) ((441 . 460)) nil (23810 22225 845342 372000) 0 nil]) ((428 . 441) (#("f" 0 1 (fontified t face font-lock-comment-face)) . -428) (undo-tree-id19 . -1) (425 . 429)) nil (23810 22225 845365 206000) 0 nil]) ((416 . 425) (t 23810 22181 924192 331000) 415) nil (23810 22225 845383 42000) 0 nil]) ((1 . 465) (#("def solution(X, Y, D):
    \"\"\"Calculates minimum amount of jumps from X to Y with jumps of length D

    :param X: Start position (int)
    :param Y: Target position (int)
    :param D: Jump length (int)
    :returns: Min number of jumps
    :rtype: Integer

    \"\"\"
    # write your code in Python 3.6
    distance = Y - X
    modulo = divmod(distance, D)
    if modulo[1]==0:
        jumps = modulo[0]
    else:
        jumps = modulo[0] + 1

    return jumps
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-function-name-face) 12 13 (fontified t face (rainbow-delimiters-depth-1-face)) 13 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-1-face)) 21 22 (fontified t composition (3 1 #1=[9 57708])) 22 27 (fontified t) 27 28 (fontified t syntax-table #2=(15) face font-lock-doc-face) 28 105 (fontified t face font-lock-doc-face) 105 106 (fontified t face font-lock-doc-face composition (3 1 #1#)) 106 113 (fontified t face font-lock-doc-face) 113 114 (fontified t face font-lock-doc-face composition (3 1 #1#)) 114 140 (fontified t face font-lock-doc-face) 140 141 (fontified t face font-lock-doc-face composition (3 1 #1#)) 141 148 (fontified t face font-lock-doc-face) 148 149 (fontified t face font-lock-doc-face composition (3 1 #1#)) 149 176 (fontified t face font-lock-doc-face) 176 177 (fontified t face font-lock-doc-face composition (3 1 #1#)) 177 184 (fontified t face font-lock-doc-face) 184 185 (fontified t face font-lock-doc-face composition (3 1 #1#)) 185 208 (fontified t face font-lock-doc-face) 208 209 (fontified t face font-lock-doc-face composition (3 1 #1#)) 209 216 (fontified t face font-lock-doc-face) 216 217 (fontified t face font-lock-doc-face composition (3 1 #1#)) 217 242 (fontified t face font-lock-doc-face) 242 243 (fontified t face font-lock-doc-face composition (3 1 #1#)) 243 248 (fontified t face font-lock-doc-face) 248 249 (fontified t face font-lock-doc-face composition (3 1 #1#)) 249 265 (fontified t face font-lock-doc-face) 265 266 (fontified t syntax-table #2# face font-lock-doc-face) 266 271 (fontified t) 271 273 (fontified t face font-lock-comment-delimiter-face) 273 303 (fontified t face font-lock-comment-face) 303 307 (fontified t) 307 315 (fontified t face font-lock-variable-name-face) 315 328 (fontified t) 328 334 (fontified t face font-lock-variable-name-face) 334 337 (fontified t) 337 343 (fontified t face font-lock-builtin-face) 343 344 (fontified t face (rainbow-delimiters-depth-1-face)) 344 355 (fontified t) 355 356 (fontified t face (rainbow-delimiters-depth-1-face)) 356 361 (fontified t) 361 363 (fontified t face font-lock-keyword-face) 363 370 (fontified t) 370 371 (fontified t face (rainbow-delimiters-depth-1-face)) 371 372 (fontified t face highlight-numbers-number) 372 373 (fontified t face (rainbow-delimiters-depth-1-face)) 373 375 (fontified t) 375 376 (fontified t face highlight-numbers-number) 376 377 (fontified t composition (3 1 #1#)) 377 386 (fontified t) 386 391 (fontified t face font-lock-variable-name-face) 391 400 (fontified t) 400 401 (fontified t face (rainbow-delimiters-depth-1-face)) 401 402 (fontified t face highlight-numbers-number) 402 403 (fontified t face (rainbow-delimiters-depth-1-face)) 403 408 (fontified t) 408 412 (fontified t face font-lock-keyword-face) 412 413 (fontified t composition (3 1 #1#)) 413 422 (fontified t) 422 427 (fontified t face font-lock-variable-name-face) 427 436 (fontified t) 436 437 (fontified t face (rainbow-delimiters-depth-1-face)) 437 438 (fontified t face highlight-numbers-number) 438 439 (fontified t face (rainbow-delimiters-depth-1-face)) 439 440 (fontified t) 440 441 (fontified t composition (5 1 [9 57709])) 441 442 (fontified t) 442 443 (fontified t face highlight-numbers-number) 443 449 (fontified t) 449 455 (fontified t face font-lock-keyword-face) 455 461 (fontified t) 461 462 (fontified t rear-nonsticky t)) . -1) (undo-tree-id0 . -462) (undo-tree-id1 . -462) (undo-tree-id2 . -462) (undo-tree-id3 . -461) (undo-tree-id4 . -462) (undo-tree-id5 . -27) (undo-tree-id6 . -27) (undo-tree-id7 . -27) (undo-tree-id8 . -27) (undo-tree-id9 . -266) (undo-tree-id10 . -27) (undo-tree-id11 . -22) (undo-tree-id12 . -22) (undo-tree-id13 . -373) (undo-tree-id14 . -374) 463) nil (23810 22181 903698 928000) 0 nil]) ((nil rear-nonsticky nil 462 . 463) (nil fontified nil 1 . 463) (1 . 463) (t . -1)) nil (23810 22181 903736 368000) 0 nil]) nil nil (23810 22181 903750 952000) 0 nil] #3# 785 9 nil)